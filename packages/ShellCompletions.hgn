import Algorithms as algo;
import Operators as oper;
import Text as text;
import RegularExpressions as re;
import FileSystem as fs;
import Introspection as intro;
import Shell as shell;

filter_by_prefix( collection_, prefix_, materializeTo_ = list ) {
	f = algo.filter( collection_, @[prefix_]( x ) { x.starts_with( prefix_ ); } );
	if ( materializeTo_ != none ) {
		return ( algo.materialize( f, materializeTo_ ) );
	}
	return ( f );
}

filter_by_prefix_with_delim( collection_, prefix_, delim_, materializeTo_ = list ) {
	start = prefix_.find_last( delim_ ) + 1;
	f = algo.filter( collection_, @[prefix_]( x ) { x.starts_with( prefix_ ); } );
	m = algo.map( f, @[start]( line_ ) { line_[start:]; } );
	if ( materializeTo_ != none ) {
		return ( algo.materialize( m, materializeTo_ ) );
	}
	return ( m );
}

delimit_singular( collection_, by_ = " " ) {
	if ( size( collection_ ) == 1 ) {
		collection_[0] += by_;
	}
	return ( collection_ );
}

split( lines_ ) {
	return ( algo.reduce( algo.map( lines_, text.split ), oper.add, [] ) );
}

drop( lines_, items_ ) {
	return ( algo.materialize( algo.filter( lines_, @[items_]( line ) { line âˆ‰ items_; } ), list ) );
}

drop_str( lines_, items_ ) {
	for ( line : lines_ ) {
		for ( item : items_ ) {
			line.replace( item, "" );
		}
	}
	return ( lines_ );
}

unique( items_ ) {
	return ( algo.materialize( algo.materialize( items_, set ), list ) );
}

forward( context_, items_ = {} ) {
	i = 1;
	contextSize = size( context_ );
	while ( i < contextSize ) {
		s = items_.get( context_[i], none );
		if ( s == none ) {
			break;
		}
		i += s;
	}
	return ( ( contextSize - i ) > 1 ? complete( context_[i:] ) : "commands" );
}

complete( context_ ) {
	self = intro.import( "ShellCompletions" );
	command = text.split( context_[0], "/" )[-1].replace( "-", "_" );
	completer = intro.attribute( self, "__" + command );
	return ( completer != none ? completer( context_ ) : none );
}

__cd( context_ ) {
	return ( "dirs" );
}

__unalias( context_ ) {
	return ( "aliases" );
}

__man( context_ ) {
	return ( "commands" );
}

__apt_cache( context_ ) {
	contextSize = size( context_ );
	lastTerm = context_[-1];
	if ( contextSize < 3 ) {
		return ( delimit_singular( filter_by_prefix( ["search", "show"], lastTerm ) ) );
	}
	if ( context_[1] == "show" ) {
		o = shell.command_output( "dpkg-query", "-W", "-f", "${Package}\\n" );
		completions = delimit_singular( filter_by_prefix( o, lastTerm ) );
		return ( completions );
	}
	return ( none );
}

__apt_get( context_ ) {
	contextSize = size( context_ );
	lastTerm = context_[-1];
	baseCmds = ["autoclean", "autoremove", "install", "purge", "remove", "update", "upgrade", "dist-upgrade"];
	if ( contextSize < 3 ) {
		return ( delimit_singular( filter_by_prefix( baseCmds, lastTerm ) ) );
	}
	cmd = context_[1];
	if ( ( cmd == "remove" ) || ( cmd == "purge" ) ) {
		o = shell.command_output( "dpkg-query", "-W", "-f", "${Package}\\n" );
		completions = delimit_singular( filter_by_prefix( o, lastTerm ) );
		return ( completions );
	} else if ( cmd == "install" ) {
		o = shell.command_output( "apt-cache", "pkgnames" );
		completions = delimit_singular( filter_by_prefix( o, lastTerm ) );
		return ( completions );
	}
	return ( none );
}

__docker( context_ ) {
	return ( context_ );
}

__env( context_ ) {
	contextSize = size( context_ ) - 1;
	i = 1;
	while ( i < contextSize ) {
		token = context_[i];
		if ( ( size( token ) > 0 ) && ( token.find( "=" ) < 0 ) ) {
			break;
		}
		i += 1;
	}
	completions = i < contextSize ? complete( context_[i:] ) : ( "environment", "commands" );
	return ( completions );
}

__file( context_ ) {
	return ( "files" );
}

__find( context_ ) {
	contextSize = size( context_ );
	if ( contextSize < 3 ) {
		return ( "dirs" );
	}
	completions = delimit_singular( filter_by_prefix( ["-name", "-iname", "-path", "-print0", "-perm"], context_[-1] ) );
	if ( ( size( completions ) == 1 ) && ( ( completions[0] == "-iname " ) || ( completions[0] == "-name " ) ) ) {
		completions[0] += "'**'";
	}
	return ( completions );
}

__git( context_ ) {
	baseCmds = [
		"add", "apply", "archive", "bisect", "blame", "branch", "checkout", "cherry-pick", "clone", "commit", "config",
		"diff", "difftool", "fetch", "grep", "help", "init", "log", "ls-files", "merge", "mergetool", "mv", "prune", "pull", "push", "rebase", "remote",
		"reset", "revert", "rm", "show", "show-branch", "stash", "status", "submodule", "tag"
	];
	baseFlags = ["-c", "-C", "--bare"];
	contextSize = size( context_ );
//	print( "context: {}\ncontextSize = {}\n".format( context_, contextSize ) );
	if ( contextSize <= 1 ) {
		return ( baseCmds );
	}
	lastTerm = context_[-1];
	completions = [];
	if (
		( contextSize == 2 )
		|| ( ( contextSize >= 3 ) && ( context_[-2] == "--bare" ) )
		|| ( ( contextSize >= 4 ) && ( ( context_[-3] == "-C" ) || ( context_[-3] == "-c" ) ) )
	) {
		return ( delimit_singular( filter_by_prefix( algo.chain( baseCmds, baseFlags ), lastTerm ) ) );
	}
	contextTerm = context_[-2];
	i = 1;
	while ( i < contextSize ) {
		token = context_[i];
		if ( token == "--bare" ) {
		} else if ( ( i < contextSize ) && ( ( token == "-C" ) || ( token == "-c" ) ) ) {
			i += 1;
		} else {
			contextTerm = token;
			break;
		}
		i += 1;
	}
	flagTerm = context_[-2];
	delimitSingular = " ";
	switch ( contextTerm ) {
		case ( "help" ): {
			completions = delimit_singular( filter_by_prefix( baseCmds, lastTerm ) );
		} break;
		case ( "add" ): {
			o = shell.command_output( "git", "ls-files", "--exclude-standard", "-o", "-m" );
			completions = delimit_singular( filter_by_prefix( o, lastTerm ) );
		} break;
		case ( "branch" ): {
			if ( ( flagTerm == "--delete" ) || ( flagTerm == "-D" ) || ( flagTerm == "--move" ) || ( flagTerm == "--copy" ) ) {
				o = shell.command_output( "git", "branch", "-a" );
				completions += delimit_singular( filter_by_prefix_with_delim( drop_str( drop( split( o ), [ "*", "->" ] ), ["remotes/"] ), lastTerm, "/" ) );
			} else {
				branchFlags = [ "--all", "--remotes", "--delete", "-D", "--move", "--copy", "-avv", "--verbose", "--track", "--no-track", "--set-upstream", "--force" ];
				completions += delimit_singular( filter_by_prefix( branchFlags, lastTerm ) );
			}
		} break;
		case ( "checkout" ): {
			o = shell.command_output( "git", "branch", "-a" );
			completions = delimit_singular( filter_by_prefix_with_delim( drop_str( drop( split( o ), [ "*", "->" ] ), ["remotes/"] ), lastTerm, "/" ) );
		} break;
		case ( "cherry-pick" ): {
			cherrypickFlags = [ "--abort", "--continue", "--edit", "--no-commit", "--quit" ];
			completions = delimit_singular( filter_by_prefix( cherrypickFlags, lastTerm ) );
			o = shell.command_output( "git", "branch", "-a" );
			completions += delimit_singular( filter_by_prefix_with_delim( drop_str( drop( split( o ), [ "*", "->" ] ), ["remotes/"] ), lastTerm, "/" ) );
		} break;
		case ( "-C" ): {
			return ( "dirs" );
		} break;
		case ( "commit" ): {
			if ( lastTerm == "-m" ) {
				completions = ["-m ''"];
			} else if ( flagTerm == "-m" ) {
				completions = ["''"];
			} else {
				commitFlags = [ "--amend", "-a", "--no-edit", "-m", "-p" ];
				completions = delimit_singular( filter_by_prefix( commitFlags, lastTerm ) );
			}
		} break;
		case ( "-c" ): { delimitSingular = "="; }
		case ( "config" ): {
			o = shell.command_output( "git", "config", "-l", "--name-only" );
			completions = delimit_singular( filter_by_prefix( o, lastTerm ), delimitSingular );
		} break;
		case ( "difftool" ): {
			difftoolFlags = [ "-d", "-t" ];
			completions = delimit_singular( filter_by_prefix( difftoolFlags, lastTerm ) );
		} break;
		case ( "fetch" ): {
			fetchFlags = [ "--all", "--prune", "--prune-tags", "--no-tags", "--tags" ];
			completions = delimit_singular( filter_by_prefix( fetchFlags, lastTerm ) );
			o = shell.command_output( "git", "remote" );
			completions += delimit_singular( filter_by_prefix( o, lastTerm ) );
		} break;
		case ( "log" ): {
			logFlags = [ "--branch", "--ignored", "--long", "--porcelain", "--short" ];
			completions = delimit_singular( filter_by_prefix( logFlags, lastTerm ) );
		} break;
		case ( "pull" ): {
			pullFlags = [ "--all", "--rebase" ];
			completions = delimit_singular( filter_by_prefix( pullFlags, lastTerm ) );
			o = shell.command_output( "git", "branch", "-a" );
			completions += delimit_singular( filter_by_prefix_with_delim( drop_str( drop( split( o ), [ "*", "->" ] ), ["remotes/"] ), lastTerm, "/" ) );
			o = shell.command_output( "git", "remote" );
			completions += delimit_singular( filter_by_prefix( split( o ), lastTerm ) );
			completions.push( " --tags" );
		} break;
		case ( "push" ): {
			pushFlags = [ "--all", "--prune", "--mirror", "--tags", "--delete", "--force", "--set-upstream" ];
			completions = delimit_singular( filter_by_prefix( pushFlags, lastTerm ) );
			o = shell.command_output( "git", "branch", "-a" );
			completions += delimit_singular( filter_by_prefix_with_delim( drop_str( drop( split( o ), [ "*", "->" ] ), ["remotes/"] ), lastTerm, "/" ) );
		} break;
		case ( "rebase" ): {
			rebaseFlags = [ "--abort", "--continue", "--interactive", "--skip" ];
			completions = delimit_singular( filter_by_prefix( rebaseFlags, lastTerm ) );
			o = shell.command_output( "git", "branch", "-a" );
			completions += delimit_singular( filter_by_prefix_with_delim( drop_str( drop( split( o ), [ "*", "->" ] ), ["remotes/"] ), lastTerm, "/" ) );
		} break;
		case ( "remote" ): {
			remoteCommands = [ "-v", "add", "rename", "rm", "prune", "set-head", "set-branch", "set-url" ];
			completions = delimit_singular( filter_by_prefix( remoteCommands, lastTerm ) );
		} break;
		case ( "reset" ): {
			resetFlags = [ "--hard ", "--soft ", "--keep ", "--mixed ", "--merge ", "HEAD~" ];
			completions = delimit_singular( filter_by_prefix( resetFlags, lastTerm ), "" );
			o = shell.command_output( "git", "branch", "-a" );
			completions += delimit_singular( filter_by_prefix_with_delim( drop_str( drop( split( o ), [ "*", "->" ] ), ["remotes/"] ), lastTerm, "/" ) );
		} break;
		case ( "stash" ): {
			stashCommands = [ "list", "show", "drop", "pop", "apply", "branch", "save", "clear", "create" ];
			completions = delimit_singular( filter_by_prefix( stashCommands, lastTerm ) );
		} break;
		case ( "status" ): {
			statusFlags = [ "--branch", "--ignored", "--long", "--porcelain", "--short" ];
			completions = delimit_singular( filter_by_prefix( statusFlags, lastTerm ) );
		} break;
		case ( "tag" ): {
			if ( ( flagTerm == "--delete" ) || ( flagTerm == "-d" ) ) {
				o = shell.command_output( "git", "tag", "--list" );
				completions += delimit_singular( filter_by_prefix_with_delim( o, lastTerm, "/" ) );
			} else if ( ( flagTerm == "--file" ) || ( flagTerm == "-F" ) ) {
				completions = "files";
			} else if ( lastTerm == "-m" ) {
				completions = ["-m ''"];
			} else if ( flagTerm == "-m" ) {
				completions = ["''"];
			} else {
				tagFlags = [ "--delete", "-d", "-a", "--force", "--list", "--file" ];
				completions += delimit_singular( filter_by_prefix( tagFlags, lastTerm ) );
			}
		} break;
		default: {
			return ( "files" );
		}
	}
//	print( "[[[\n{}\n]]]\n".format( completions ) );
	return ( completions );
}

__make( context_ ) {
	makefileNames = [ "BSDmakefile", "GNUmakefile", "Makefile", "makefile", "_aux/mk/master.mk" ];
	contextSize = size( context_ );
	contextTerm = "";
	if ( contextSize > 2 ) {
		contextTerm = context_[-2];
	}
	if ( contextTerm == "-f" ) {
		return ( "files" );
	}
	if ( contextTerm == "-C" ) {
		return ( "dirs" );
	}
	lastTerm = "";
	if ( contextSize > 0 ) {
		lastTerm = context_[-1];
	}
	completions = [];
	for ( makefileName : makefileNames ) {
		try {
			makefile = fs.open( makefileName, fs.OPEN_MODE.READ );
			completions += delimit_singular( filter_by_prefix( drop( split( algo.filter( makefile, @( l ) { l.find( "PHONY" ) >= 0; } ) ), [ ".PHONY:" ] ), lastTerm ) );
		} catch ( FileSystemException e ) {
		}
	}
	if ( ( lastTerm == "" ) || ( lastTerm == "-" ) ) {
		completions.push( "-f" ).push( "-C" );
	} else if ( lastTerm == "-f" ) {
		completions.push( "-f " );
	} else if ( lastTerm == "-C" ) {
		completions.push( "-C " );
	}
	return ( completions );
}

__pkill( context_ ) {
	contextSize = size( context_ );
	lastTerm = "";
	if ( contextSize > 1 ) {
		lastTerm = context_[-1];
	}
	o = shell.command_output( "ps", "hx", "-o", "args" );
	completions = delimit_singular( filter_by_prefix( algo.map( o, @( l ){ text.split( text.split( l )[0], "/" )[-1].strip( "()-" ); } ), lastTerm ) );
	return ( completions );
}

__printenv( context_ ) {
	return ( "environment" );
}

__setopt( context_ ) {
	options = ["ignore_filenames"];
	lastTerm = "";
	if ( size( context_ ) > 1 ) {
		lastTerm = context_[-1];
	}
	return ( delimit_singular( filter_by_prefix( options, lastTerm ) ) );
}

__stat( context_ ) {
	return ( "files" );
}

__sudo( context_ ) {
	return ( forward( context_ ) );
}

__watch( context_ ) {
	return ( forward( context_, { "-n": 2 } ) );
}

__xargs( context_ ) {
	return ( forward( context_, { "-0": 1, "-I": 2, "-n": 2 } ) );
}

__1exec( context_ ) {
	o = shell.command_output( context_[0], "--help" );
	completions = [];
	for ( line : o ) {
		line.strip();
		if ( line.starts_with( "-" ) ) {
			completions.push( text.split( line )[0] );
		}
	}
	return ( delimit_singular( filter_by_prefix( completions, context_[-1] ) ) );
}

