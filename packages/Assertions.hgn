/* The `Assertions` package provides set of runtime assertion guards. */

import Introspection as intro;

/*
 * The `FailedAssertion` class is `Exception` specialization representing failed runtime assertion guard.
 */
class FailedAssertion : Exception {
	constructor( message_ ) {
		super.constructor( message_ );
	}
}

/*
 * ( *actual*, *expected*[, *message*] ) - assert that tested value (*actual*) is equal to an *expected* value.
 */
ensure_equals( actual_, expected_, message_ = none ) {
	message = message_ != none ? message_ + ": " : "";
	if ( type( actual_ ) != type( expected_ ) ) {
		s = intro.call_stack()[1];
		throw FailedAssertion( "{}{} unexpected type, actual: {}, expected: {}".format( message, s, type( actual_ ), type( expected_ ) ) );
	}
	if ( actual_ != expected_ ) {
		s = intro.call_stack()[1];
		throw FailedAssertion( "{}{} actual: {}, expected: {}".format( message, s, actual_, expected_ ) );
	}
}

/*
 * ( *result*[, *message*] ) - assert that *result* of given expression is `true`.
 */
ensure_true( result_, message_ = none ) {
	message = message_ != none ? message_ + ": " : "";
	if ( type( result_ ) != boolean ) {
		s = intro.call_stack()[1];
		throw FailedAssertion( "{}{} result expected to be a `boolean` type".format( message, s ) );
	}
	if ( ! result_ ) {
		s = intro.call_stack()[1];
		throw FailedAssertion( "{}{} result expected to be `true`".format( message, s ) );
	}
}

/*
 * ( *result*[, *message*] ) - assert that *result* of given expression is `false`.
 */
ensure_false( result_, message_ = none ) {
	message = message_ != none ? message_ + ": " : "";
	if ( type( result_ ) != boolean ) {
		s = intro.call_stack()[1];
		throw FailedAssertion( "{}{} result expected to be a `boolean` type".format( message, s ) );
	}
	if ( result_ ) {
		s = intro.call_stack()[1];
		throw FailedAssertion( "{}{} result expected to be `false`".format( message, s ) );
	}
}

/*
 * ( *code*, exception, [, *message*] ) - assert that execution of given *code* will result in *exception* being thrown.
 */
ensure_throws( code_, exception_, message_ = none ) {
	message = message_ != none ? message_ + ": " : "";
	thrown = true;
	try {
		code_();
		thrown = false;
	} catch ( Exception e ) {
		if ( type( e ) != exception_ ) {
			s = intro.call_stack()[1];
			throw FailedAssertion( "{}{} bad exception type, actual: {}, expected: {}".format( message, s, type( e ), exception_ ) );
		}
	}
	if ( ! thrown ) {
		s = intro.call_stack()[1];
		throw FailedAssertion( "{}{} exception `{}` was not thrown".format( message, s, exception_ ) );
	}
}

