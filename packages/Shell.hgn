/*
 * System Shell helper funcions.
 */

import Algorithms as algo;
import Operators as oper;
import OperatingSystem as os;
import FileSystem as fs;
import Text as text;
import RegularExpressions as re;
import Introspection as intro;

/*
 * ( *cmd* ) - find where command *cmd* is located in system *\${PATH}*.
 */
where( cmd_ ) {
	paths = os.env( "PATH" );
	paths = paths != none ? algo.materialize(
		algo.filter(
			algo.map( text.split( paths, ":" ), @[cmd_]( p ) { p + "/" + cmd_; } ),
			fs.exists
		),
		tuple
	) : ();
	return ( paths );
}

/*
 * ( *cmd*, *args*, *foreground* ) - execute given system command *cmd* with *args* arguments looking for *cmd* in system *\${PATH}* possibly in the *foreground*.
 */
spawn( cmd_, args_, foreground_ = false, in_ = none, out_ = none, err_ = none ) {
	paths = ( cmd_.find( "/" ) == -1 ) ? where( cmd_ ) : ( cmd_, );
	child = none;
	for ( p : paths ) {
		try {
			child = os.spawn( p, args_, foreground_, in_, out_, err_ );
			break;
		} catch ( OperatingSystemException e ) {
		}
	}
	return ( child );
}

/*
 * ( *cmd*, *args*, *foreground* ) - run command *cmd* with *args* arguments (possibly in the *foreground*) and return its output.
 */
command_output( cmd_, args_, foreground_ = false, in_ = none, out_ = none, err_ = none ) {
	child = spawn( cmd_, args_, foreground_, in_, out_, err_ );
	if ( child == none ) {
		return ( none );
	}
	output = algo.materialize( algo.map( child.out(), string.strip ), list );
	return ( output );
}

/*
 * ( *path*, *lines* ) - return first *lines* lines from file at *path*.
 */
head( path_, lines_ ) {
	f = fs.open( path_, fs.OPEN_MODE.READ );
	return ( algo.materialize( algo.slice( algo.map( f, string.strip ), lines_ ), tuple ) );
}

/*
 * ( *paths* ) - return first existing path from set of *paths*.
 */
first_existing( paths_ ) {
	path = none;
	for ( trial : paths_ ) {
		if ( fs.exists( trial ) ) {
			path = trial;
			break;
		}
	}
	return ( path );
}

/*
 * ( *stream*, *pattern* ) - get only lines matching *pattern* from given *stream*.
 */
grep( stream_, pattern_ ) {
	pattern = type( pattern_ ) == re.CompiledRegularExpression ? pattern_ : re.compile( pattern_ );
	stream = algo.filter(
		algo.map( stream_, string.strip ),
		@[pattern]( line ) { pattern.match( line ).matched(); }
	);
	return ( stream );
}

/*
 * ( *stream*, *pattern*, *column* ) - get only words from column *column* from lines matching *pattern* from given *stream*.
 */
awk( stream_, pattern_, column_, by_ = none ) {
	m = algo.map( grep( stream_, pattern_ ), text.split( ~, by_ ) );
	m = algo.map( m, oper.subscript( ~, column_ - 1 ) );
	return ( m );
}

/*
 * ( *commandStr* ) - run specified *commandStr* string via system shell.
 */
run( command_ ) {
	intro.symbol( "shell_run" )( command_ );
}

/*
 * ( *commandName* ) - check if system shell knows about of existance the command given by *commandName*.
 */
has( command_ ) {
	intro.symbol( "shell_has" )( command_ );
}

/*
 * ( *paths* ) - Source scripts from all existing *paths*.
 */
source( paths_ ) {
	existingPaths = algo.filter( paths_, fs.exists );
	for ( p : existingPaths ) {
		run( "source {}".format( p ) );
	}
}

