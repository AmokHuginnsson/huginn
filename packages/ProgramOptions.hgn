/* Program options handler. */

import Algorithms as algo;
import Text as text;
import OperatingSystem as os;
import FileSystem as fs;

/* Requirements type for option value. */
enum VALUE_REQUIREMENT {
	/* Option value is required. */
	REQUIRED,
	/* Option value is optional. */
	OPTIONAL,
	/* Option does not accept a value. */
	NONE
}

class Parsed {
	options = none;
	free = none;
	to_string() {
		return ( "Parsed( {}, {} )".format( options, free ) );
	}
}

/* Program option description. */
class Option {
	_short = none;
	_long = none;
	_requement = none;
	_conversion = none;
	_valueName = none;
	_help = none;
	_defaultValue = none;
	constructor( name, requirement, help, conversion, valueName, defaultValue ) {
		assert( type( name ) == string, "Option name must be a `string` object." );
		assert( requirement ∈ VALUE_REQUIREMENT, "Value requirement must be a VALUE_REQUIREMENT type." );
		assert( type( help ) == string, "Help must be a `string` object." );
		assert( ( requirement == VALUE_REQUIREMENT.NONE ) || ( type( conversion ) == type( type ) ), "Option value type must be a `callable`." );
		assert(
			( ( requirement == VALUE_REQUIREMENT.NONE ) && ( valueName == none ) ) || ( type( valueName ) == string ),
			"Option value name must be a `string` object."
		);
		assert( ( defaultValue == none ) || ( type( defaultValue ) == conversion ), "Type of default value must be congruent with option value type." );
		n = text.split( name, "," );
		assert( size( n ) < 3, "Option name can have at most two forms." );
		if ( size( n ) == 1 ) {
			assert( size( n[0] ) > 0, "An option reuires a name." );
			if ( size( n[0] ) == 1 ) {
				_short = n[0][0];
			} else {
				_long = n[0];
			}
		} else {
			assert(
				( ( size( n[0] ) == 1 ) && ( size( n[1] ) > 1 ) ) || ( ( size( n[1] ) == 1 ) && ( size( n[0] ) > 1 ) ),
				"Using two option name forms, one of them must be short and another one must be long."
			);
			if ( size( n[0] ) == 1 ) {
				_short = n[0][0];
				_long = n[1];
			} else {
				_short = n[1][0];
				_long = n[0];
			}
		}
		_conversion = conversion;
		_requement = requirement;
		_valueName = valueName;
		_help = help;
		_defaultValue = defaultValue;
	}
	help_str_helper() {
		s = "";
		if ( _requement != VALUE_REQUIREMENT.NONE ) {
			fmt = _requement == VALUE_REQUIREMENT.REQUIRED ? "{}{}" : ( _long != none ? "[{}{}]" : "{}[{}]" );
			s = fmt.format( _long != none ? "=" : " ", _valueName != none ? _valueName : "val" );
		}
		return ( s );
	}
	help_len_helper() {
		l = size( help_str_helper() );
		l += ( _long != none ? size( _long ) : 0 );
		return ( l );
	}
	to_string() {
		return ( "Option({}, {}, {}, {}, {}, {}, {})".format( _short, _long, _requement, _conversion, _valueName, _help, _defaultValue ) );
	}
}

/* Program options handler. */
class Handler {
	_name = none;
	_doc = none;
	_options = [];
	__verify_option( opt_ ) {
		for ( o : _options ) {
			assert( ( opt_._short == none ) || ( opt_._short != o._short ), "Short form `-{}` already used by other option.".format( opt_._short ) );
			assert( ( opt_._long == none ) || ( opt_._long != o._long ), "Long form `--{}` already used by other option.".format( opt_._long ) );
		}
	}
	constructor( name_, doc_ ) {
		_name = name_;
		_doc = doc_;
	}
	/* Add option description to the handler. */
	add_option( name, requirement, help, conversion = none, valueName = none, defaultValue = none ) {
		opt = Option( name, requirement, help, conversion, valueName, defaultValue );
		__verify_option( opt );
		_options.push( opt );
	}
	/* Parse command line options. */
	command_line( argv_, parsed_ = none ) {
		argc = size( argv_ );
		options = parsed_ != none ? parsed_.options : {};
		invalid = 0;
		nonOption = 1;
		i = 1;
		while ( i < argc ) {
			arg = argv_[i];
			if ( arg.starts_with( "--" ) ) {
				arg = arg[2:];
				argNameEnd = arg.find( "=" );
				value = none;
				if ( argNameEnd >= 0 ) {
					value = arg[argNameEnd + 1:];
					arg = arg[:argNameEnd];
				}
				opt = algo.iterator( algo.filter( _options, @[arg]( o ){ o._long == arg; } ) );
				if ( opt.is_valid() ) {
					opt = opt.value();
					if ( ( opt._requement == VALUE_REQUIREMENT.REQUIRED ) && ( argNameEnd == -1 ) ) {
						i += 1;
						if ( i < argc ) {
							value = argv_[i];
						} else {
							invalid += 1;
							os.stderr().write_line( "{}: Option: `--{}` requres an argument.\n".format( argv_[0], arg ) );
							continue;
						}
					}
					if ( opt._requement == VALUE_REQUIREMENT.REQUIRED ) {
						options[opt._long] = opt._conversion( value );
					} else if ( opt._requement == VALUE_REQUIREMENT.OPTIONAL ) {
						options[opt._long] = ( value != none ) && ( size( value ) > 0 ) ? opt._conversion( value ) : opt._defaultValue;
					} else {
						if ( opt._conversion != none ) {
							opt._conversion();
						}
						options[opt._long] = true;
					}
				} else {
					invalid += 1;
					os.stderr().write_line( "{}: Unrecognized option: `--{}`\n".format( argv_[0], arg ) );
				}
			} else if ( arg.starts_with( "-" ) ) {
				arg = arg[1:];
				value = none;
				argLen = size( arg );
				k = 0;
				while ( k < argLen ) {
					a = arg[k];
					opt = algo.iterator( algo.filter( _options, @[a]( o ){ o._short == a; } ) );
					if ( opt.is_valid() ) {
						opt = opt.value();
						if ( ( opt._requement == VALUE_REQUIREMENT.REQUIRED ) || ( opt._requement == VALUE_REQUIREMENT.OPTIONAL ) ) {
							value = arg[k + 1:];
							k += size( value );
						}
						if ( ( opt._requement == VALUE_REQUIREMENT.REQUIRED ) && ( ( value == none ) || ( size( value ) == 0 ) ) ) {
							i += 1;
							if ( i < argc ) {
								value = argv_[i];
							} else {
								k += 1;
								invalid += 1;
								os.stderr().write_line( "{}: Option: `-{}` requres an argument.\n".format( argv_[0], a ) );
								continue;
							}
						}
						if ( opt._requement == VALUE_REQUIREMENT.REQUIRED ) {
							options[opt._long != none ? opt._long : opt._short] = opt._conversion( value );
						} else if ( opt._requement == VALUE_REQUIREMENT.OPTIONAL ) {
							options[opt._long != none ? opt._long : opt._short] = size( value ) > 0 ? opt._conversion( value ) : opt._defaultValue;
						} else {
							if ( opt._conversion != none ) {
								opt._conversion();
							}
							options[opt._long != none ? opt._long : opt._short] = true;
						}
					} else {
						invalid += 1;
						os.stderr().write_line( "{}: Unrecognized option: `-{}`\n".format( argv_[0], a ) );
					}
					k += 1;
				}
			} else {
				argv_ = argv_[:i] + argv_[i + 1:] + [argv_[i]];
				nonOption += 1;
				i -= 1;
				argc -= 1;
			}
			i += 1;
		}
		for ( o : _options ) {
			if ( ( ( o._long != none ) && ! options.has_key( o._long ) ) || ( ( o._long == none ) && ! options.has_key( o._short ) ) ) {
				options[o._long != none ? o._long : o._short] = o._requement != VALUE_REQUIREMENT.NONE ? o._defaultValue : false;
			}
		}
		parsed = none;
		if ( invalid == 0 ) {
			parsed = Parsed( options, argv_[argc:] );
		} else {
			print( "{}\n".format( help_string() ) );
		}
		return ( parsed );
	}
	read_rc( parsed_ = none ) {
		home = os.env( "HOME" );
		paths = [
			"{}/etc/conf/{}rc".format( home, _name ),
			"{}/etc/{}rc".format( home, _name ),
			"{}/.{}rc".format( home, _name ),
			"/etc/conf/{}rc".format( _name ),
			"/etc/{}rc".format( _name )
		];
		envPath = os.env( "{}RC".format( copy( _name ).to_upper() ) );
		if ( envPath != none ) {
			paths.insert( 0, envPath );
		}
		options = parsed_ != none ? parsed_.options : {};
		for ( path : paths ) {
			if ( __read_rc( path, options ) ) {
				break;
			}
		}
		for ( o : _options ) {
			if ( ( ( o._long != none ) && ! options.has_key( o._long ) ) || ( ( o._long == none ) && ! options.has_key( o._short ) ) ) {
				options[o._long != none ? o._long : o._short] = o._requement != VALUE_REQUIREMENT.NONE ? o._defaultValue : false;
			}
		}
		return ( Parsed( options ) );
	}
	__read_rc( path_, options_ ) {
		rcFile = none;
		try {
			rcFile = fs.open( path_, fs.OPEN_MODE.READ );
		} catch ( FileSystemException e ) {
			return ( false );
		}
		headLike = text.character_class( text.CHARACTER_CLASS.LETTER ) + text.character_class( text.CHARACTER_CLASS.GREEK ) + "_";
		tailLike = text.character_class( text.CHARACTER_CLASS.WORD ) + text.character_class( text.CHARACTER_CLASS.GREEK );
		lineNo = 0;
		for ( line : rcFile ) {
			lineNo += 1;
			line = line.strip();
			if ( ( size( line ) == 0 ) || ( line[0] == '#' ) || ( ( line[0] == '[' ) && ( line[-1] == ']' ) ) ) {
				continue;
			}
			if ( headLike.find( string( line[0] ) ) == -1 ) {
				os.stderr().write_line( "{}: malformed entry `{}` at line {}\n".format( path_, line, lineNo ) );
				continue;
			}
			nameEndPos = line.find_other_than( tailLike );
			name = none;
			value = none;
			if ( nameEndPos != -1 ) {
				name = line[:nameEndPos];
				valuePos = line.find_other_than( text.character_class( text.CHARACTER_CLASS.WHITESPACE ), nameEndPos );
				value = line[valuePos:].strip( "\"'" );
			} else {
				name = line;
			}
			opt = algo.iterator( algo.filter( _options, @[name]( o ){ o._long == name; } ) );
			if ( opt.is_valid() ) {
				opt = opt.value();
				if ( ( opt._requement == VALUE_REQUIREMENT.REQUIRED ) && ( value == none ) ) {
					os.stderr().write_line( "{}: Option: `{}` requres an argument at line {}\n".format( path_, name, lineNo ) );
					continue;
				}
				if ( opt._requement == VALUE_REQUIREMENT.REQUIRED ) {
					options_[opt._long] = opt._conversion( value );
				} else if ( opt._requement == VALUE_REQUIREMENT.OPTIONAL ) {
					options_[opt._long] = ( value != none ) && ( size( value ) > 0 ) ? opt._conversion( value ) : opt._defaultValue;
				} else {
					if ( opt._conversion != none ) {
						opt._conversion();
					}
					options_[opt._long] = true;
				}
			} else {
				os.stderr().write_line( "{}: invalid option `{}` at line {}\n".format( path_, line, lineNo ) );
			}
		}
		return ( true );
	}
	help_string() {
		doc = "Usage: {0} [OPTION]... [FILE]...\n{0} - {1}\n".format( _name, _doc );
		doc += "\n";
		doc += "Options:\n";
		maxLen = 0;
		hasShort = false;
		for ( o : _options ) {
			l = o.help_len_helper();
			if ( ( o._long != none ) && ( l > maxLen ) ) {
				maxLen = l;
			}
			if ( o._short != none ) {
				hasShort = true;
			}
		}
		for ( o : _options ) {
			s = o.help_str_helper();
			l = o.help_len_helper();
			if ( ( o._short != none ) && ( o._long != none ) ) {
				fmt = "  -{{}}, --{{}}{{}}  {{:{}s}}{{}}\n".format( maxLen - l );
				doc += fmt.format( o._short, o._long, s, "", o._help );
			} else if ( o._long != none ) {
				fmt = "  {}--{{}}{{}}  {{:{}s}}{{}}\n".format( hasShort ? "    " : "", maxLen - l );
				doc += fmt.format( o._long, s, "", o._help );
			} else {
				fmt = "  -{{}}{{}}  {{:{}s}}{{}}\n".format( maxLen + 4 - l );
				doc += fmt.format( o._short, s, "", o._help );
			}
		}
		doc += "\nAll long form options can be used in program configuration file: {}rc.".format( _name );
		return ( doc );
	}
	to_string() {
		return ( "{}".format( _options ) );
	}
}

